name: Deploy

on:  # Trigger this workflow manually
  workflow_dispatch:
    inputs:
      application:
        description: 'Application Workload'
        required: true
        default: 'record-store'
      application_repo:
        description: 'Repository with Application Code'
        required: true
        default: 'https://github.com/MaryKroustali/record_store_app'
      sql_server_admin_username:
        description: 'Admin Username for SQL server'
        required: true
        default: 'dbadmin'
      sql_server_admin_password: 
        description: 'Admin Password for SQL server'
        required: true
        type: string

permissions:
  id-token: write
  contents: read

jobs:        
  # deploy_on_azure:
  #   name: Deploy on Azure
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: "Upgrade to latest Bicep version"
  #       run: az bicep upgrade
  #     - name: "Login to Azure"
  #       uses: azure/login@v1
  #       with:
  #         # Set secrets value as described in https://learn.microsoft.com/en-us/azure/developer/github/connect-from-azure-openid-connect#prerequisites
  #         client-id: ${{ secrets.AZURE_CLIENT_ID }}
  #         tenant-id: ${{ secrets.AZURE_TENANT_ID }}
  #         subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  #     - name: "Checkout repository"
  #       uses: actions/checkout@main
  #     - name: "Deploy in Subscription scope"
  #       uses: azure/arm-deploy@v2
  #       with:
  #         scope: 'subscription'
  #         region: 'westeurope'
  #         template: ./bicep/main.bicep
  #         # Overwrite values in .bicepparam with input parameters
  #         parameters: ./bicep/main.bicepparam application=${{ inputs.application }} sql_server_admin_username=${{ inputs.sql_server_admin_username }} sql_server_admin_password=${{ inputs.sql_server_admin_password }}
  
  configure_cicd_webapp:
    name: Configure CI/CD for WebApp
    # needs: deploy_on_azure
    runs-on: ubuntu-latest
    steps:
      - name: "Login to Azure"
        uses: azure/login@v1
        with:
          # Set secrets value as described in https://learn.microsoft.com/en-us/azure/developer/github/connect-from-azure-openid-connect#prerequisites
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: "Deploy Code to Webapp"
        run: | 
          az webapp deployment github-actions add --repo ${{ inputs.application_repo }} --name app-${{ inputs.application }} --resource-group rg-${{ inputs.application }} --token ${{ secrets.gh_pat }}
          
  # import_data_to_db:
  #   name: Import Data to SQL Database
  #   needs: deploy_on_azure
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: "Login to Azure"
  #       uses: azure/login@v1
  #       with:
  #         # Set secrets value as described in https://learn.microsoft.com/en-us/azure/developer/github/connect-from-azure-openid-connect#prerequisites
  #         client-id: ${{ secrets.AZURE_CLIENT_ID }}
  #         tenant-id: ${{ secrets.AZURE_TENANT_ID }}
  #         subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  #     - name: "Enable access for Pipeline Agent"
  #       run: | 
  #         agentIP=$(curl -s http://ipinfo.io/json | jq -r '.ip')
  #         echo "Enabling networking access for Pipeline Agent with IP $agentIP"
  #         az sql server firewall-rule create --name agent_access --resource-group rg-${{ inputs.application }} --server sql-${{ inputs.application }} --end-ip-address $agentIP --start-ip-address $agentIP
  #     - name: "Checkout Record Store App repository"
  #       uses: actions/checkout@main
  #       with:
  #         repository: MaryKroustali/record_store_app
  #         path: record_store_app
  #     - name: Azure SQL Deploy
  #       uses: Azure/sql-action@v2.2.1
  #       with:
  #         connection-string: 'Server=tcp:sql-${{ inputs.application }}.database.windows.net,1433;Initial Catalog=chinook; User ID=${{ inputs.sql_server_admin_username }}; Password=${{ inputs.sql_server_admin_password }}; Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;'
  #         path: record_store_app/SQL/chinook.sql
  #     - name: "Disable access for Pipeline Agent"
  #       run: | 
  #         agentIP=$(curl -s http://ipinfo.io/json | jq -r '.ip')
  #         echo "Disabling networking access for Pipeline Agent with IP $agentIP"
  #         az sql server firewall-rule create --name agent_access --resource-group rg-${{ inputs.application }} --server sql-${{ inputs.application }}
  
